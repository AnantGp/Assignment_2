{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs26 \cf0 \uc0\u8232 
\f1\b\fs40                                   ASSIGNMENT 2
\f0\b0\fs26 \
\
1. List of Operators in Java:\
   - Arithmetic Operators (+, -, *, /, %)\
   - Increment and Decrement Operators (++, --)\
   - Relational Operators (<, <=, >, >=)\
   - Equality Operators (==, !=)\
   - Assignment Operators (=, +=, -=, *=, /=, %=, ...)\
   - Logical Operators (&&, ||, !)\
   - Bitwise Operators (&, |, ^, ~, <<, >>, >>>)\
   - Conditional (Ternary) Operator (?:)\
   - Unary Operators (+, -, ++, --, ~, !)\
   - Shift Operators (>>, >>>, <<)\
   - instanceof Operator\
   - Type Cast Operator\
   - New Operator (used for object creation)\
   - [] Operator (used for array element access)\
\
2. Increment and Decrement Operators:\
   - Increment (++) and Decrement (--) operators are used to increase or decrease the value of a variable by 1.\
   - Prefix Increment: (++variable) increases the value and then uses it.\
   - Postfix Increment: (variable++) uses the value and then increases it.\
   - Prefix Decrement: (--variable) decreases the value and then uses it.\
   - Postfix Decrement: (variable--) uses the value and then decreases it.\
\
   Example:\
   \
   int x = 5;\
   int y = ++x;  // y is 6, x is 6 (prefix increment)\
   int a = 5;\
   int b = a++;  // b is 5, a is 6 (postfix increment)\uc0\u8232 \
   ```\
\
3. Conditional Operators in Java:\
   - The conditional (ternary) operator in Java is represented as `condition ? expression1 : expression2`. It's a shorthand for an `if-else` statement and returns either `expression1` or `expression2` based on the evaluation of `condition`.\
\
   Example:\
  \
   int num = 10;\
   String result = (num > 5) ? "Greater than 5" : "Less than or equal to 5";\
   \
\
4. Types of Operators Based on the Number of Operands:\
   - Unary Operators: Operate on one operand (e.g., ++x, -x).\
   - Binary Operators: Operate on two operands (e.g., x + y, x * y).\
   - Ternary Operators: Operate on three operands (e.g., condition ? expr1 : expr2).\
\
5. Conditional Statements in Java:\
   - Conditional statements are used for decision-making in Java. They include:\
     - `if` statement\
     - `if-else` statement\
     - `if-else if-else` statement\
     - `switch` statement\
\
6. Syntax of an `if-else` statement in Java:\
   \
   if (condition) \{\
       // Code to execute if the condition is true\
   \} else \{\
       // Code to execute if the condition is false\
   \}\
   \
\
7. Three Types of Iterative Statements in Java:\
   - `for` loop\
   - `while` loop\
   - `do-while` loop\
\
8. Array:\
   - An array in Java is a data structure that stores a fixed-size sequence of elements of the same data type.\
   - It provides an efficient way to store and access multiple values under a single variable name.\
   - Arrays in java are treated as "Objects"\
   - In java memory for objects is given in "HeapArea"\
\
\
9. Creating an Array in Java:\
   - Declare an array: `dataType[] arrayName;`\
   - Initialise an array: `arrayName = new dataType[size];`\uc0\u8232 \
   - Example:\
     \
   int[]a = \{10,20,30,40\};\
  char[] a= \{'a','e','i','o','u'\};\
  String[] a= \{"Sachin","Ramesh","Tendulkar","IND"\};\
\
     \
\
10. Difference between StringBuffer and StringBuilder in Java:\
    \uc0\u8232 		
\f1\b StringBuffer:\uc0\u8232 
\f0\b0 \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl1
\f2\fs18 \cf0 {\listtext	\uc0\u8226 	}
\f0\fs26 StringBuffer is thread-safe, which means it can be used safely in multi-threaded environments where multiple threads might access and modify the same instance simultaneously.\
\ls1\ilvl1
\f2\fs18 {\listtext	\uc0\u8226 	}
\f0\fs26 It achieves thread safety by using synchronised methods, which can make it slower in scenarios where high concurrency is not a concern.\uc0\u8232 \u8232 
\f1\b StringBuilder:\uc0\u8232 
\f0\b0 \
\ls1\ilvl1
\f2\fs18 {\listtext	\uc0\u8226 	}
\f0\fs26 StringBuilder is not thread-safe, meaning it is not designed to be used in multi-threaded applications without external synchronisation mechanisms.\
\ls1\ilvl1
\f2\fs18 {\listtext	\uc0\u8226 	}
\f0\fs26 It does not have the overhead of synchronisation, making it faster for single-threaded or non-concurrent operations.\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \
 \
}